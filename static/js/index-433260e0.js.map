{"version":3,"file":"index-433260e0.js","sources":["../../../src/pages/demo/editor/packages/config.ts","../../../src/pages/demo/editor/packages/codemirror.ts","../../../src/pages/demo/editor/packages/component.ts","../../../src/pages/demo/editor/packages/index.ts","../../../src/pages/demo/editor/packages/code-list.ts","../../../src/pages/demo/editor/index.vue"],"sourcesContent":["import { App, inject } from 'vue';\nimport { Props } from './component';\n\nconst CONFIG_SYMBOL = Symbol('vue-codemirror-global-config');\nexport const injectGlobalConfig = (app: App, config?: Props) => {\n  app.provide(CONFIG_SYMBOL, config);\n};\n\nexport const useGlobalConfig = () => {\n  return inject<Props>(CONFIG_SYMBOL, {} as Props);\n};\n","import {\n  EditorState,\n  EditorStateConfig,\n  Compartment,\n  Extension,\n  StateEffect\n} from '@codemirror/state';\nimport { EditorView, ViewUpdate, keymap, placeholder } from '@codemirror/view';\nimport { indentWithTab } from '@codemirror/commands';\nimport { indentUnit } from '@codemirror/language';\nimport * as CSS from 'csstype';\n\n// state\nexport interface EditorStateCreatorOptions {\n  config: EditorStateConfig;\n  onUpdate(viewUpdate: ViewUpdate): void;\n  onChange(doc: string, viewUpdate: ViewUpdate): void;\n  onFocus(viewUpdate: ViewUpdate): void;\n  onBlur(viewUpdate: ViewUpdate): void;\n}\nexport const createState = ({\n  config,\n  ...events\n}: EditorStateCreatorOptions): EditorState => {\n  const extensions = Array.isArray(config.extensions)\n    ? config.extensions\n    : [config.extensions];\n  return EditorState.create({\n    doc: config.doc,\n    selection: config.selection,\n    extensions: [\n      ...extensions,\n      EditorView.updateListener.of(viewUpdate => {\n        // https://discuss.codemirror.net/t/codemirror-6-proper-way-to-listen-for-changes/2395/11\n        events.onUpdate(viewUpdate);\n        if (viewUpdate.docChanged) {\n          events.onChange(viewUpdate.state.doc.toString(), viewUpdate);\n        }\n        if (viewUpdate.focusChanged) {\n          viewUpdate.view.hasFocus\n            ? events.onFocus(viewUpdate)\n            : events.onBlur(viewUpdate);\n        }\n      })\n    ]\n  });\n};\n\n// doc\nexport const getDoc = (view: EditorView) => view.state.doc.toString();\nexport const setDoc = (view: EditorView, newDoc: string) => {\n  return view.dispatch({\n    changes: {\n      from: 0,\n      to: view.state.doc.length,\n      insert: newDoc\n    }\n  });\n};\n\n// effects\nexport const destroy = (view: EditorView) => view.destroy();\nexport const focus = (view: EditorView) => view.focus(); // TODO: focus on the last word\n\n// https://codemirror.net/examples/config/\n// https://github.com/uiwjs/react-codemirror/blob/22cc81971a/src/useCodeMirror.ts#L144\n// https://gist.github.com/s-cork/e7104bace090702f6acbc3004228f2cb\nconst rerunCompartment = () => {\n  const compartment = new Compartment();\n  const run = (view: EditorView, extension: Extension) => {\n    if (compartment.get(view.state)) {\n      // reconfigure\n      view.dispatch({ effects: compartment.reconfigure(extension) });\n    } else {\n      // inject\n      view.dispatch({\n        effects: StateEffect.appendConfig.of(compartment.of(extension))\n      });\n    }\n  };\n  return { compartment, run };\n};\n\n// https://codemirror.net/examples/reconfigure/\nexport const rerunExtension = () => rerunCompartment().run;\nexport const toggleExtension = (extension: Extension) => {\n  const { compartment, run } = rerunCompartment();\n  return (view: EditorView, targetApply?: boolean) => {\n    const exExtension = compartment.get(view.state);\n    const apply = targetApply ?? exExtension !== extension;\n    run(view, apply ? extension : []);\n  };\n};\n\n// extensions\nexport const extensions = {\n  placeholder: (string: string) => placeholder(string),\n  disable: () => [EditorView.editable.of(false), EditorState.readOnly.of(true)],\n  enable: () => [EditorView.editable.of(true), EditorState.readOnly.of(false)],\n  // https://codemirror.net/examples/tab/\n  indentWithTab: () => keymap.of([indentWithTab]),\n  tabSize: (tabSize: number) => [\n    EditorState.tabSize.of(tabSize),\n    indentUnit.of(' '.repeat(tabSize))\n  ],\n  // https://codemirror.net/examples/styling/\n  style: (style: CSS.Properties) => EditorView.theme({ '&': { ...style } })\n};\n","import {\n  defineComponent,\n  ref,\n  computed,\n  watch,\n  onMounted,\n  onBeforeUnmount,\n  h,\n  PropType,\n  ExtractPropTypes\n} from 'vue';\nimport * as CSS from 'csstype';\nimport { basicSetup } from 'codemirror';\nimport { EditorState, EditorStateConfig } from '@codemirror/state';\nimport { EditorView, ViewUpdate } from '@codemirror/view';\nimport { useGlobalConfig } from './config';\nimport * as cm from './codemirror';\n\nconst globalProps = {\n  autofocus: {\n    type: Boolean,\n    default: undefined\n  },\n  disabled: {\n    type: Boolean,\n    default: undefined\n  },\n  indentWithTab: {\n    type: Boolean,\n    default: undefined\n  },\n  tabSize: Number,\n  placeholder: String,\n  style: Object as PropType<CSS.Properties>,\n  // codemirror options\n  root: Object as PropType<ShadowRoot | Document>,\n  extensions: Array as PropType<EditorStateConfig['extensions']>,\n  selection: Object as PropType<EditorStateConfig['selection']>\n};\n\nexport type Props = ExtractPropTypes<typeof globalProps>;\nexport const DEFAULT_CONFIG: Readonly<Partial<Props>> = Object.freeze({\n  autofocus: false,\n  disabled: false,\n  indentWithTab: true,\n  tabSize: 2,\n  placeholder: '',\n  extensions: [basicSetup]\n});\n\nexport default defineComponent({\n  name: 'VueCodemirror',\n  props: {\n    modelValue: {\n      type: String,\n      required: false,\n      default: ''\n    },\n    ...globalProps\n  },\n  emits: {\n    // when content(doc) change only\n    'update:modelValue': (value: string, viewUpdate: ViewUpdate) => {\n      console.log(value, viewUpdate);\n      return true;\n    },\n    change: (value: string, viewUpdate: ViewUpdate) => {\n      console.log(value, viewUpdate);\n      return true;\n    },\n    // when codemirror state change\n    update: (viewUpdate: ViewUpdate) => {\n      console.log(viewUpdate);\n      return true;\n    },\n    focus: (viewUpdate: ViewUpdate) => {\n      console.log(viewUpdate);\n      return true;\n    },\n    blur: (viewUpdate: ViewUpdate) => {\n      console.log(viewUpdate);\n      return true;\n    },\n    // when component mounted\n    ready: (payload: {\n      view: EditorView;\n      state: EditorState;\n      container: HTMLDivElement;\n    }) => {\n      console.log(payload);\n      return true;\n    }\n  },\n  setup(props, context) {\n    const container = ref<HTMLDivElement>();\n    const component = {\n      view: null as any as EditorView,\n      state: null as any as EditorState\n    };\n    const defaultConfig = {\n      ...DEFAULT_CONFIG,\n      ...useGlobalConfig()\n    };\n\n    const config = computed(() => {\n      return Object.keys(props).reduce(\n        (result, key) => ({\n          ...result,\n          // @ts-ignore\n          [key]: props[key] ?? defaultConfig[key]\n        }),\n        {} as Required<Props>\n      );\n    });\n\n    onMounted(() => {\n      // init codemirror\n      component.state = cm.createState({\n        config: {\n          doc: props.modelValue,\n          selection: config.value.selection,\n          // The extensions are split into two parts, global and component prop.\n          // Only the global part is initialized here.\n          // The prop part is dynamically reconfigured after the component is mounted.\n          extensions: defaultConfig.extensions\n        },\n        onFocus: viewUpdate => context.emit('focus', viewUpdate),\n        onBlur: viewUpdate => context.emit('blur', viewUpdate),\n        onUpdate: viewUpdate => context.emit('update', viewUpdate),\n        onChange: (doc, viewUpdate) => {\n          if (doc !== props.modelValue) {\n            context.emit('update:modelValue', doc, viewUpdate);\n            context.emit('change', doc, viewUpdate);\n          }\n        }\n      });\n\n      component.view = new EditorView({\n        state: component.state,\n        parent: container.value!,\n        root: config.value.root\n      });\n\n      // watch prop.extensions\n      const reExtensions = cm.rerunExtension();\n      watch(\n        () => props.extensions,\n        extensions => reExtensions(component.view, extensions || []),\n        { immediate: true }\n      );\n\n      // watch prop.disabled\n      const toggleDisabled = cm.toggleExtension(cm.extensions.disable());\n      watch(\n        () => config.value.disabled,\n        disabled => toggleDisabled(component.view, disabled),\n        { immediate: true }\n      );\n\n      // watch prop.indentWithTab\n      const toggleIWT = cm.toggleExtension(cm.extensions.indentWithTab());\n      watch(\n        () => config.value.indentWithTab,\n        iwt => toggleIWT(component.view, iwt),\n        { immediate: true }\n      );\n\n      // watch prop.tabSize\n      const reTabSize = cm.rerunExtension();\n      watch(\n        () => config.value.tabSize,\n        tabSize => reTabSize(component.view, cm.extensions.tabSize(tabSize)),\n        { immediate: true }\n      );\n\n      // watch prop.placeholder\n      const rePlaceholder = cm.rerunExtension();\n      watch(\n        () => config.value.placeholder,\n        placeholder =>\n          rePlaceholder(component.view, cm.extensions.placeholder(placeholder)),\n        { immediate: true }\n      );\n\n      // watch prop.style\n      const reStyle = cm.rerunExtension();\n      watch(\n        () => config.value.style,\n        style => reStyle(component.view, cm.extensions.style(style)),\n        { immediate: true }\n      );\n\n      // watch prop.modal value\n      watch(\n        () => props.modelValue,\n        newValue => {\n          if (newValue !== cm.getDoc(component.view)) {\n            cm.setDoc(component.view, newValue);\n          }\n        }\n      );\n\n      // immediate autofocus\n      if (config.value.autofocus) {\n        cm.focus(component.view);\n      }\n\n      // ready\n      context.emit('ready', {\n        ...component,\n        container: container.value!\n      });\n    });\n\n    onBeforeUnmount(() => {\n      // destroy codemirror\n      cm.destroy(component.view);\n    });\n\n    return () => {\n      return h('div', {\n        class: 'v-codemirror',\n        style: { display: 'contents' },\n        ref: container\n      });\n    };\n  }\n});\n","import type { Plugin } from 'vue';\nimport Component, { Props } from './component';\nimport { injectGlobalConfig } from './config';\n\nexport type { Props } from './component';\nexport { DEFAULT_CONFIG } from './component';\n\nexport const Codemirror = Component;\nexport const install: Plugin = (app, defaultConfig?: Props) => {\n  app.component(Component.name, Component);\n  injectGlobalConfig(app, defaultConfig);\n};\n\nexport default {\n  Codemirror,\n  install\n};\n","const codeList: any = {\n  javascript: `for (let i = 0; i < 3; i++) {\n    console.log('hello world')\n}`,\n  html: `<html>\n\t<head>\n\t\t\t<style>\n\t\t\th1 {\n\t\t\t\t\tfont-size: 30px; \n\t\t\t\t\tcolor: red;\n\t\t\t}\n\t\t\t</style>\n\t</head>\n\t<body style=\"background-color:white\">\n\t\t\t<h1>Hello HTML/CSS/JS! Hot reload!</h1>\n\t\t\t<script>\n\t\t\t\t\tconsole.log('hello world!')\n\t\t\t</script>\n\t</body>\n</html>`,\n  json: `{\n    name:'张三',\n    gender:'男',\n    age:20\n}`,\n  markdown: `## 欢迎使用markdown\n\t+ 简单\n\t+ 好用\n\t`,\n  cpp: `#include <iostream>\nusing namespace std;\n\t \n// main() 是程序开始执行的地方\n\t \nint main()\n{\n\t\tcout << \"Hello World\"; // 输出 Hello World\n\t\treturn 0;\n}`,\n  java: `import java.util.Scanner;\n\npublic class Main {\n\t\n\t\tpublic static void main(final String[] args) {\n\t\t\t\tSystem.out.println(\"What's your name?\");\n\t\t\t\tScanner scanner = new Scanner(System.in);\n\t\t\t\tString a = scanner.nextLine();\n\t\t\t\tSystem.out.println(\"Hello, \" + a);\n\t\t}\n\t\n}`,\n  php: `<!DOCTYPE html>\n<html>\n<body>\n\n<?php\necho \"Hello World!\";\n?>\n\n</body>\n</html>\t\n`,\n  python: `#!/usr/bin/python\n\nprint (\"Hello, Python!\")`,\n  rust: `[package]\nname = \"my-project\"\nversion = \"0.1.0\"\nauthors = [\"runner\"]\nedition = \"2021\"\n\n# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html\n\n[dependencies]`,\n  sql: `SHOW DATABASES;`\n};\nexport default codeList;\n","<script lang=\"ts\">\nimport { defineComponent } from 'vue'\nexport default defineComponent({\n  name: 'editor',\n})\n</script>\n<template>\n  <div class=\"content-box\">\n    <div class=\"example\">\n      <div class=\"toolbar\">\n        <pre class=\"state\">{{ state }}</pre>\n        <div class=\"config\">\n          <p>\n            <button @click=\"state.disabled = !state.disabled\">\n              toggle disabled\n            </button>\n          </p>\n          <p>\n            <button @click=\"state.autofocus = !state.autofocus\">\n              toggle autofocus\n            </button>\n          </p>\n          <p>\n            <button @click=\"state.indentWithTab = !state.indentWithTab\">\n              toggle indentWithTab\n            </button>\n          </p>\n          <p>\n            <label for=\"tabSize\">tabSize:</label>\n            <input\n              id=\"tabSize\"\n              v-model.number=\"state.tabSize\"\n              type=\"range\"\n              min=\"2\"\n              max=\"10\"\n              step=\"1\"\n            />\n          </p>\n          <p>\n            <label for=\"backgroundColor\">backgroundColor:</label>\n            <select\n              id=\"backgroundColor\"\n              v-model=\"state.backgroundColor\"\n              name=\"backgroundColor\"\n            >\n              <option\n                v-for=\"option in [\n                  'white',\n                  'red',\n                  'black',\n                  'yellow',\n                  'lawngreen',\n                  'blue'\n                ]\"\n                :key=\"option\"\n                :value=\"option\"\n              >\n                {{ option }}\n              </option>\n            </select>\n          </p>\n          <p>\n            <label for=\"language\">language:</label>\n            <select\n              id=\"language\"\n              v-model=\"state.language\"\n              name=\"language\"\n            >\n              <option\n                v-for=\"option in [\n                  'javascript',\n                  'html',\n                  'json',\n                  'markdown',\n                  'cpp',\n                  'java',\n                  'php',\n                  'python',\n                  'rust',\n                  'sql'\n                ]\"\n                :key=\"option\"\n                :value=\"option\"\n              >\n                {{ option }}\n              </option>\n            </select>\n          </p>\n          <p>\n            <label for=\"theme\">theme:</label>\n            <select\n              id=\"theme\"\n              v-model=\"state.theme\"\n              name=\"theme\"\n            >\n              <option\n                v-for=\"option in ['default', 'oneDark']\"\n                :key=\"option\"\n                :value=\"option\"\n              >\n                {{ option }}\n              </option>\n            </select>\n          </p>\n        </div>\n      </div>\n      <div class=\"content\">\n        <Codemirror\n          ref=\"cm\"\n          v-model=\"code\"\n          class=\"codemirror\"\n          :autofocus=\"state.autofocus\"\n          :placeholder=\"state.placeholder\"\n          :indent-with-tab=\"state.indentWithTab\"\n          :tab-size=\"state.tabSize\"\n          :disabled=\"state.disabled\"\n          :style=\"{ backgroundColor: state.backgroundColor }\"\n          :extensions=\"extensions\"\n          @ready=\"consoleLog('ready', $event)\"\n          @change=\"consoleLog('change', $event)\"\n          @focus=\"consoleLog('focus', $event)\"\n          @blur=\"consoleLog('blur', $event)\"\n        />\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\" name=\"editor\">\nimport { reactive, shallowRef, computed, onMounted } from 'vue';\nimport { javascript } from '@codemirror/lang-javascript';\nimport { html } from '@codemirror/lang-html';\nimport { json } from '@codemirror/lang-json';\nimport { markdown } from '@codemirror/lang-markdown';\nimport { cpp } from '@codemirror/lang-cpp';\nimport { java } from '@codemirror/lang-java';\nimport { php } from '@codemirror/lang-php';\nimport { python } from '@codemirror/lang-python';\nimport { rust } from '@codemirror/lang-rust';\nimport { sql } from '@codemirror/lang-sql';\nimport { oneDark } from '@codemirror/theme-one-dark';\nimport { Codemirror } from './packages';\nimport codeList from './packages/code-list';\n\nconst themes: any = { oneDark };\nconst languages: any = {\n  javascript: javascript(),\n  html: html(),\n  json: json(),\n  markdown: markdown(),\n  cpp: cpp(),\n  java: java(),\n  php: php(),\n  python: python(),\n  rust: rust(),\n  sql: sql()\n};\n\nconst consoleLog = console.log;\nconst code = computed(() => {\n  const str = codeList[state.language] || '暂无该语言内容';\n  return str;\n});\nconst cm = shallowRef();\nconst state = reactive({\n  disabled: false,\n  indentWithTab: true,\n  tabSize: 2,\n  autofocus: true,\n  placeholder: 'code...',\n  backgroundColor: 'white',\n  language: 'javascript',\n  theme: 'oneDark'\n});\n\nconst extensions = computed(() => {\n  const result = [];\n  result.push(languages[state.language]);\n  if (themes[state.theme]) {\n    result.push(themes[state.theme]);\n  }\n  return result;\n});\n\nonMounted(() => {\n  console.log('cm', cm);\n});\n</script>\n\n<style scoped lang=\"less\">\n.content-box {\n  .example {\n    display: flex;\n    width: 100%;\n    height: 100vh;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    .toolbar {\n      display: flex;\n      align-items: center;\n      margin-bottom: 1rem;\n      .state {\n        padding: 2em;\n        margin-right: 2rem;\n        border: 1px solid #cccccc;\n      }\n    }\n    .content {\n      display: flex;\n      width: 100%;\n      justify-content: center;\n      margin-bottom: 20px;\n      .code {\n        overflow: scroll;\n      }\n      .code,\n      .codemirror {\n        :deep(.cm-editor) {\n          width: 100%;\n          min-height: 35vh;\n          margin: 0 1rem;\n          border: 1px solid #dddddd;\n        }\n      }\n    }\n  }\n}\n</style>\n"],"names":["CONFIG_SYMBOL","Symbol","createState","_a","_b","config","events","__objRest","extensions","Array","isArray","EditorState","create","doc","selection","EditorView","updateListener","of","viewUpdate","onUpdate","docChanged","onChange","state","toString","focusChanged","view","hasFocus","onFocus","onBlur","rerunCompartment","compartment","Compartment","run","extension","get","dispatch","effects","reconfigure","StateEffect","appendConfig","rerunExtension","toggleExtension","targetApply","exExtension","string","placeholder","editable","readOnly","keymap","indentWithTab","tabSize","indentUnit","repeat","style","theme","&","__spreadValues","globalProps","autofocus","type","Boolean","default","disabled","Number","String","Object","root","DEFAULT_CONFIG","freeze","basicSetup","Codemirror","defineComponent","name","props","modelValue","required","emits","update:modelValue","value","change","update","focus","blur","ready","payload","[object Object]","context","container","ref","component","defaultConfig","inject","computed","keys","reduce","result","key","__spreadProps","onMounted","cm.createState","emit","parent","reExtensions","cm.rerunExtension","watch","immediate","toggleDisabled","cm.toggleExtension","cm.extensions","toggleIWT","iwt","reTabSize","rePlaceholder","reStyle","newValue","newDoc","changes","from","to","length","insert","setDoc","onBeforeUnmount","destroy","h","class","display","codeList$1","javascript","html","json","markdown","cpp","java","php","python","rust","sql","__default__","themes","oneDark","languages","consoleLog","console","log","code","codeList","language","cm","shallowRef","reactive","backgroundColor","push"],"mappings":"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"}