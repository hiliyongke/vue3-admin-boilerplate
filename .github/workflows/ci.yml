name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

# 取消之前的运行
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # 代码质量检查
  lint:
    name: 代码质量检查
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 安装 pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: 安装依赖
        run: pnpm install --frozen-lockfile

      - name: ESLint 检查
        run: pnpm lint:check

      - name: TypeScript 类型检查
        run: pnpm type-check

      - name: Stylelint 检查
        run: pnpm lint:css:check

      - name: Prettier 检查
        run: pnpm lint:prettier:check

  # 单元测试
  test:
    name: 单元测试
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout代码
        uses: actions/checkout@v4

      - name: 安装 pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: 安装依赖
        run: pnpm install --frozen-lockfile

      - name: 运行单元测试
        run: pnpm test:coverage

      - name: 上传覆盖率报告
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

      - name: 上传测试结果
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results
          path: coverage/

  # E2E 测试
  e2e:
    name: E2E 测试
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: Checkout代码
        uses: actions/checkout@v4

      - name: 安装 pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: 安装依赖
        run: pnpm install --frozen-lockfile

      - name: 安装 Playwright 浏览器
        run: pnpm playwright install --with-deps chromium

      - name: 运行 E2E 测试
        run: pnpm test:e2e

      - name: 上传测试报告
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  # 构建
  build:
    name: 构建项目
    needs: [lint, test]
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        mode: [development, production]
    
    steps:
      - name: Checkout代码
        uses: actions/checkout@v4

      - name: 安装 pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: 安装依赖
        run: pnpm install --frozen-lockfile

      - name: 构建 (${{ matrix.mode }})
        run: pnpm build:${{ matrix.mode == 'development' && 'dev' || 'prod' }}

      - name: 上传构建产物
        uses: actions/upload-artifact@v3
        with:
          name: dist-${{ matrix.mode }}
          path: dist/
          retention-days: 7

      - name: 分析构建产物大小
        run: |
          echo "## 构建产物大小 (${{ matrix.mode }})" >> $GITHUB_STEP_SUMMARY
          du -sh dist/ >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 详细信息" >> $GITHUB_STEP_SUMMARY
          du -h dist/* | sort -hr >> $GITHUB_STEP_SUMMARY

  # Docker 构建
  docker:
    name: Docker 构建
    needs: [build]
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
      - name: Checkout代码
        uses: actions/checkout@v4

      - name: 设置 Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 登录 Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 提取元数据
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: your-registry/vue3-admin
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha

      - name: 构建并推送
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # 部署到测试环境
  deploy-staging:
    name: 部署到测试环境
    needs: [build, e2e]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging.example.com
    
    steps:
      - name: Checkout代码
        uses: actions/checkout@v4

      - name: 下载构建产物
        uses: actions/download-artifact@v3
        with:
          name: dist-development
          path: dist/

      - name: 部署到测试服务器
        run: |
          echo "部署到测试环境..."
          # 这里添加实际的部署命令
          # 例如: rsync, scp, 或使用云服务商的 CLI

      - name: 通知部署结果
        if: always()
        run: |
          echo "测试环境部署完成"
          echo "访问地址: https://staging.example.com"

  # 部署到生产环境
  deploy-production:
    name: 部署到生产环境
    needs: [build, e2e]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://example.com
    
    steps:
      - name: Checkout代码
        uses: actions/checkout@v4

      - name: 下载构建产物
        uses: actions/download-artifact@v3
        with:
          name: dist-production
          path: dist/

      - name: 部署到生产服务器
        run: |
          echo "部署到生产环境..."
          # 这里添加实际的部署命令

      - name: 健康检查
        run: |
          echo "执行健康检查..."
          # curl https://example.com/health

      - name: 通知部署结果
        if: always()
        run: |
          echo "生产环境部署完成"
          echo "访问地址: https://example.com"

  # 性能测试
  performance:
    name: 性能测试
    needs: [build]
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout代码
        uses: actions/checkout@v4

      - name: 下载构建产物
        uses: actions/download-artifact@v3
        with:
          name: dist-production
          path: dist/

      - name: 运行 Lighthouse CI
        run: |
          npm install -g @lhci/cli
          lhci autorun || echo "Lighthouse CI 未配置"

  # 安全扫描
  security:
    name: 安全扫描
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout代码
        uses: actions/checkout@v4

      - name: 运行 npm audit
        run: npm audit --audit-level=moderate || true

      - name: 运行 Snyk 扫描
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
